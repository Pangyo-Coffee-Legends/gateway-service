# Eurekaì ë±ë¡ë  ì íë¦¬ì¼ì´ì ì´ë¦
spring.application.name=gateway-service

# Gateway ìë² í¬í¸ ì¤ì 
server.port=10251

spring.profiles.active=dev

# Gatewayê° Eurekaì ë±ë¡ë ìë¹ì¤ ëª©ë¡ì ìëì¼ë¡ ë¼ì°íì ì¬ì©íëë¡ ì¤ì 
spring.cloud.gateway.discovery.locator.enabled=true

# Gateway CORS ì ì± ì¤ì 
#spring.cloud.gateway.globalcors.corsConfigurations.[/**].allowedOriginPatterns=*
#spring.cloud.gateway.globalcors.corsConfigurations.[/**].allowedMethods=GET,POST,PUT,DELETE,OPTIONS
#spring.cloud.gateway.globalcors.corsConfigurations.[/**].allowedHeaders=*
#spring.cloud.gateway.globalcors.corsConfigurations.[/**].allowCredentials=true
#spring.cloud.gateway.globalcors.corsConfigurations.[/**].maxAge=3600

# Chat 서비스 경로를 제외한 다른 API 경로에만 CORS 설정 적용
spring.cloud.gateway.globalcors.corsConfigurations.[/api/v1/token/**].allowedOriginPatterns=*
spring.cloud.gateway.globalcors.corsConfigurations.[/api/v1/token/**].allowedMethods=GET,POST,PUT,DELETE
spring.cloud.gateway.globalcors.corsConfigurations.[/api/v1/token/**].allowedHeaders=*
spring.cloud.gateway.globalcors.corsConfigurations.[/api/v1/token/**].allowCredentials=true
spring.cloud.gateway.globalcors.corsConfigurations.[/api/v1/token/**].maxAge=3600

spring.cloud.gateway.globalcors.corsConfigurations.[/api/v1/members/**].allowedOriginPatterns=*
spring.cloud.gateway.globalcors.corsConfigurations.[/api/v1/members/**].allowedMethods=GET,POST,PUT,DELETE
spring.cloud.gateway.globalcors.corsConfigurations.[/api/v1/members/**].allowedHeaders=*
spring.cloud.gateway.globalcors.corsConfigurations.[/api/v1/members/**].allowCredentials=true
spring.cloud.gateway.globalcors.corsConfigurations.[/api/v1/members/**].maxAge=3600

spring.cloud.gateway.globalcors.corsConfigurations.[/api/v1/attendances/**].allowedOriginPatterns=*
spring.cloud.gateway.globalcors.corsConfigurations.[/api/v1/attendances/**].allowedMethods=GET,POST,PUT,DELETE
spring.cloud.gateway.globalcors.corsConfigurations.[/api/v1/attendances/**].allowedHeaders=*
spring.cloud.gateway.globalcors.corsConfigurations.[/api/v1/attendances/**].allowCredentials=true
spring.cloud.gateway.globalcors.corsConfigurations.[/api/v1/attendances/**].maxAge=3600

spring.cloud.gateway.globalcors.corsConfigurations.[/api/v1/books/**].allowedOriginPatterns=*
spring.cloud.gateway.globalcors.corsConfigurations.[/api/v1/books/**].allowedMethods=GET,POST,PUT,DELETE
spring.cloud.gateway.globalcors.corsConfigurations.[/api/v1/books/**].allowedHeaders=*
spring.cloud.gateway.globalcors.corsConfigurations.[/api/v1/books/**].allowCredentials=true
spring.cloud.gateway.globalcors.corsConfigurations.[/api/v1/books/**].maxAge=3600

# CHAT API CORS 설정 추가
spring.cloud.gateway.globalcors.corsConfigurations.[/api/v1/chat/**].allowedOriginPatterns=http://localhost:10253
spring.cloud.gateway.globalcors.corsConfigurations.[/api/v1/chat/**].allowedMethods=GET,POST,PUT,DELETE
spring.cloud.gateway.globalcors.corsConfigurations.[/api/v1/chat/**].allowedHeaders=*
spring.cloud.gateway.globalcors.corsConfigurations.[/api/v1/chat/**].allowCredentials=true
spring.cloud.gateway.globalcors.corsConfigurations.[/api/v1/chat/**].maxAge=3600


# WebSocket/SockJS 지원을 위한 필수 설정
spring.cloud.gateway.globalcors.add-to-simple-url-handler-mapping=true

# 중복 헤더 제거 필터 추가
spring.cloud.gateway.default-filters=DedupeResponseHeader=Access-Control-Allow-Origin Access-Control-Allow-Credentials


# Eureka ìë² URL ì¤ì  (ê°ë° íê²½ììë ë¡ì»¬ ìë² ì¬ì©)
#eureka.client.service-url.defaultZone=http://s2.java21.net:10252/eureka/
eureka.client.service-url.defaultZone=http://localhost:10252/eureka/

# ì íë¦¬ì¼ì´ìì ìí(Health)ë¥¼ Eurekaê° ì£¼ê¸°ì ì¼ë¡ ì²´í¬íëë¡ ì¤ì 
eureka.client.healthcheck.enabled=true

# Eurekaì ìì ì ìíë¥¼ ê°±ì íë ì£¼ê¸° (ê¸°ë³¸ 30ì´ â 5ì´ë¡ ë¨ì¶)
eureka.instance.lease-renewal-interval-in-seconds=5

# Eurekaê° ì¸ì¤í´ì¤ë¥¼ ë§ë£ìí¤ê¸°ê¹ì§ ëê¸°íë ìê° (ê¸°ë³¸ 90ì´)
eureka.instance.lease-expiration-duration-in-seconds=90

## (ì í) Eurekaì ë±ë¡ë  í¸ì¤í¸ëªì ëªìì ì¼ë¡ ì¤ì í  ì ìì
#eureka.instance.hostname=gateway-service

# hostname ëì  IP ì£¼ìë¥¼ Eurekaì ë±ë¡íëë¡ ì¤ì 
eureka.instance.prefer-ip-address=true

# ì¸ì¤í´ì¤ ê³ ì  ID ì§ì  (ì íë¦¬ì¼ì´ì ì´ë¦ + ì¸ì¤í´ì¤ ID + ëë¤ ê° ì¡°í©)
eureka.instance.instance-id=${spring.application.name}:${spring.application.instance_id:${random.value}}

# ì ì²´ ë¡ê·¸ ë ë²¨ ì¤ì  (INFO)
logging.level.root=INFO

# Spring Cloud Gateway ê´ë ¨ ë¡ê·¸ ë ë²¨ì DEBUGë¡ ì¤ì  (ë¼ì°í ê´ë ¨ ëë²ê¹ì ì ì©)
logging.level.org.springframework.cloud.gateway=DEBUG

# Redis ìë ì¤ì  ìì ì ì¸ (Redis ìë² ë¯¸ì¬ì© ì)
spring.autoconfigure.exclude=org.springframework.boot.autoconfigure.data.redis.RedisAutoConfiguration

# ì½ì ë¡ê·¸ í¨í´ ì»¤ì¤í°ë§ì´ì§ (ìì ì ì©ë ìê°, ë¡ê·¸ë ë²¨, ì¤ë ëëª ë±)
logging.pattern.console = ${LOGPATTERN_CONSOLE:%green(%d{HH:mm:ss.SSS}) %blue(%-5level) %red([%thread]) %yellow(%logger{15}) - %msg%n}
